<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:task="http://www.springframework.org/schema/task"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd"
	default-lazy-init="true">

	<description>Spring Configuration</description>
	
	<!-- 导入参数平台 -->
	<import resource="classpath*:/context/acms-client.xml" />
	<bean class="com.uns.inf.acms.client.config.ConfigInitLoadingConfigurer" parent="baseConfigurer" lazy-init="false">
		<!-- 应用的名称 -->
		<property name="appName" value="paysys.paysys_web_pro" /><!-- 值与配置的参数名称前缀一致 -->
		<!-- 应用的环境local、dev、sit、uat、prd -->
		<property name="appEnv" value="paysys.paysys_web_pro.${maven.profiles.env}" /> <!-- 通过修改 ${maven.profiles.env}的值，切换不同环境 -->
		<!--参数前缀去除 -->
		<property name="prefixStripKeys">
			<list>
				<value>paysys.paysys_web_pro.${maven.profiles.env}</value>
			</list>
		</property>
		<!-- 必须以inf.acms,开头，多个以逗号隔开，inf.sms说明以 inf.sms自动加载 -->
		<property name="keyPatterns" value="inf.acms,paysys.paysys_web_pro.${maven.profiles.env}" />
	</bean>
	
	
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:jeesite.properties" />
	
	<!-- 加载应用属性实例，可通过  @Value("#{APP_PROP['jdbc.driver']}") String jdbcDriver 方式引用 -->
    <util:properties id="APP_PROP" location="classpath:jeesite.properties" local-override="true"/>
    
	
	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.uns.paysys"><!-- base-package 如果多个，用“,”分隔 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
 	<!-- MyBatis begin -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.uns.paysys"/>
        <property name="typeAliasesSuperType" value="com.uns.paysys.common.persistence.BaseEntity"/>
        <property name="mapperLocations" value="classpath:/mappings/**/*.xml"/>
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
    </bean>
    
    <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.uns.paysys"/>
        <property name="annotationClass" value="com.uns.paysys.common.persistence.annotation.MyBatisDao"/>
    </bean>
   
	<!-- 配置 JSR303 Bean Validator 定义 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- 缓存配置 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:${ehcache.configFile}" />
	</bean>
	
	<!-- 计划任务配置，用 @Service @Lazy(false)标注类，用@Scheduled(cron = "0 0 2 * * ?")标注方法 -->
    <task:executor id="executor" pool-size="10"/> <task:scheduler id="scheduler" pool-size="10"/>
    <task:annotation-driven scheduler="scheduler" executor="executor" proxy-target-class="true"/>
	
	
	<!-- C3p0数据库源连接池配置；多数据源；引用参数平台 -->
	<bean id="baseDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close"> 
		<property name="driverClass" value="oracle.jdbc.driver.OracleDriver" /> 
		<property name="minPoolSize" value="10" />
		<property name="maxPoolSize" value="50" />
		<property name="initialPoolSize" value="10" />
		<property name="maxIdleTime" value="60" /> 
		<property name="idleConnectionTestPeriod" value="60" /> 
		<property name="checkoutTimeout" value="60000"/>
	</bean>
	<!-- 主数据源 -->
	<bean id="mainDataSource" parent="baseDataSource"  destroy-method="close"> 
		<property name="jdbcUrl" value="${datasource.url}"/>
		<property name="user" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />
	</bean> 
	<!-- 备数据源 -->
	<bean id="backupDataSource" parent="baseDataSource" destroy-method="close"> 
		<property name="jdbcUrl" value="${backupdatasource.url}"/>
		<property name="user" value="${backupdatasource.username}" />
		<property name="password" value="${backupdatasource.password}" />
	</bean>
	
	<!-- 数据源切换，DynamicDataSourceHolder.setDataSourceType("xxxx") -->
	<bean id="dataSource" class="com.uns.paysys.common.utils.RoutingDataSources"> 
		<property name="targetDataSources"> 
			<map key-type="java.lang.String"> 
			<entry value-ref="mainDataSource" key="MAIN_DATA_SOURCE"></entry> 
			<entry value-ref="backupDataSource" key="BACKUP_DATA_SOURCE"></entry> 
			</map> 
		</property>
		<!-- 指定默认数据源 -->
		<property name="defaultTargetDataSource" ref="mainDataSource"></property> 
	</bean> 
	
	
	 
    <!-- ===========================定义事务============================== -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/> -->
    <!-- MyBatis end -->

	<!-- 定义aspectj -->
	<!-- <aop:aspectj-autoproxy proxy-target-class="true" /> -->

 	<aop:config>  
         <aop:advisor pointcut="execution(* com..service..*Service.*(..))"
			advice-ref="txAdvice"  />
		<aop:advisor pointcut="execution(* com..web..*Controller.*(..))"
			advice-ref="txAdvice" />
    </aop:config>  
    
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
	    <tx:attributes>  
	    		<tx:method name="get*" read-only="true" />
				<tx:method name="load*" read-only="true" />
				<tx:method name="paging*" read-only="true" />
				<tx:method name="find*" read-only="true" />
				<tx:method name="save*" rollback-for="Exception" />
				<tx:method name="insert*" rollback-for="Exception" />
				<tx:method name="edit*" rollback-for="Exception" />
				<tx:method name="create*" rollback-for="Exception" />
				<tx:method name="update*" rollback-for="Exception" />
				<tx:method name="remove*" rollback-for="Exception" />
				<tx:method name="del*" rollback-for="Exception" />
				<tx:method name="checkBill" rollback-for="Exception" />
				<tx:method name="agree" rollback-for="Exception" />
	    </tx:attributes>  
    </tx:advice>  

	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource"
		scope="singleton">
		<property name="useCodeAsDefaultMessage" value="true" />
		<property name="basenames">
			<list>
				<value>messages</value>
			</list>
		</property>
	</bean>
	<!-- ===========================定义事务============================== -->
	
</beans>